%! Author = davidmarquis
%! Date = 2020-03-06
\documentclass[11pt]{article}
\usepackage[ruled,vlined]{algorithm2e}
\usepackage{amsmath}

% Document
\begin{document}

\textbf{Greedy Algorithms}

We want to perform $n$ jobs consecutively.
Given a list of completion times $[t_1,\ldots,t_n]$ for the jobs define
$C_j$ as the sum of the completion time for the $j$th job and the completion time for all the jobs
preceding it.
If the preceding completion times are
$t_{a_1},\ldots,t_{a_{j-1}}$
then
$$C_j = \sum_{i=1}^{j-1}{t_{a_i}} + t_j.$$
We make a schedule for the jobs by ordering the list $T$ so that the $i$th element is the $i$th job to complete.
Given weights $[w_1,\ldots,w_n]$ define the \textit{cost} of a schedule as the sum $$\sum_{i=1}^n{C_iw_i}.$$
\\~\noindent
Consider the problem \textsc{ JobSchedule }, specified as follows: \\
Pre-Conditions:
\begin{itemize}
\item $W = [w_1,\ldots,w_n]$ where $w_i$ are positive real numbers
\item $T = [t_1,\ldots,t_n]$ where $t_i$ are positive real numbers and $t_i \not= t_j$ for all $i,j$ between 1 and $n$.
\end{itemize}
Post-Conditions:
\begin{itemize}
\item An ordered list of the elements of $T$ that minimizes $\sum_{i=1}^n{C_iw_i}$
\end{itemize} \\~\

\textbf{Example}
Given 3 jobs with completion times $[t_1,t_2,t_3]$ = $[5,3,1]$
if the jobs are done in the order $[t_2, t_1, t_3]$ and $w_1 = w_2 = w_3=1$ then the costs are
\begin{alignat*}{2}
&C_2                       &= 3 \\
&C_1 = C_2 + 5 = 3 + 5     &= 8 \\
&C_3 = C_1 + 1 = 3 + 5 + 1 &= 9
\end{alignat*}
yielding a cost of $3+8+9 = 20.$ The optimal order is $[t_3, t_2, t_1]$ which has cost $14$. \vskip 1cm
The following greedy algorithm returns an optimal solution for \textsc{ JobSchedule }. \vskip 1cm
\begin{algorithm}[H]
\SetAlgoLined
\SetKwInOut{Input}{Input}
\SetKwInOut{Output}{Output}
\KwIn{$W=[w_1,\ldots,w_n], T=[t_1,\ldots,t_n]$}
\KwOut{An ordering of $T$ that minimizes the cost}
  Compute $A = [a_1, \ldots, a_n]$ with $a_i = w_i/t_i$ for $1 \leq i \leq n$ \\
  Sort $T$ in decreasing order of $a_i$ \\
  Return $T$ \\
  \caption{\textsc{JobSchedule}}
\end{algorithm}

\begin{itemize}
\item [1 mark] State a tight asymptotic bound on the running time of \textsc{ JobSchedule } as a function of \(n\)
\item [5 marks] Prove that your algorithm is correct.
\end{itemize}

\end{document}

